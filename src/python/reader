#!/usr/bin/env python
""" molpro gradient and hessian readers
    IMPORTANT: Need to activate conda env via
    conda activate paccenv
"""
import sys
import numpy
import autoparse.pattern as app
import autoparse.find as apf

COORD_LABEL_PATTERN = ('G' + app.one_of_these(['X', 'Y', 'Z']) +
                       app.UNSIGNED_INTEGER)
ARRAY_LINE_PATTERN = (
    app.LINE_START +
    app.padded(COORD_LABEL_PATTERN) +
    app.series(app.FLOAT, app.LINESPACES) +
    app.LINE_END
)
ARRAY_BLOCK_HEAD_PATTERN = (
    app.LINE_START +
    app.padded(app.series(COORD_LABEL_PATTERN, app.LINESPACES)) +
    app.LINE_END
)
ARRAY_BLOCK_BODY_PATTERN = app.series(ARRAY_LINE_PATTERN, app.NEWLINE)
ARRAY_BLOCK_PATTERN = (
    ARRAY_BLOCK_HEAD_PATTERN + app.NEWLINE + ARRAY_BLOCK_BODY_PATTERN
)
ARRAY_BLOCKS_PATTERN = app.series(ARRAY_BLOCK_PATTERN, app.NEWLINE)


def hessian(output_string):
    """ get hessian from output
    """
    #head_pattern = app.escape('Force Constants (Second Derivatives of '
    #                          'the Energy) in [a.u.]')
    head_pattern = app.escape('Mass weighted Second Derivative Matrix')
    block_pattern = head_pattern + app.NEWLINE + ARRAY_BLOCKS_PATTERN
    array_str = apf.last_capture(app.capturing(block_pattern), output_string)
    block_strs = apf.all_captures(app.capturing(ARRAY_BLOCK_BODY_PATTERN),
                                  array_str)
    tril_rows = _values_from_molpro_tril_block(block_strs[0])
    ncoords = len(tril_rows)

    for block_str in block_strs[1:]:
        block_tril_rows = _values_from_molpro_tril_block(block_str)
        nrows = len(block_tril_rows)
        for block_idx, row_idx in enumerate(range(nrows+1, ncoords)):
            tril_rows[row_idx] += block_tril_rows[block_idx]

    hess = numpy.zeros((ncoords, ncoords))

    for row_idx, tril_row in enumerate(tril_rows):
        hess[row_idx, :row_idx+1] = tril_row
        hess[:row_idx+1, row_idx] = tril_row

    # make sure we ended up with a square symmetric matrix
    assert hess.ndim == 2 and hess.shape[0] == hess.shape[1]
    assert numpy.allclose(hess, hess.T)

    return tuple(map(tuple, hess))


def _values_from_molpro_tril_block(block_str):
    tril_rows = [list(map(float, block_line.split()[1:]))
                 for block_line in block_str.splitlines()]
    return tril_rows


if __name__ == '__main__':
    OUTPUT_STRING = open('output.dat').read()
    HESS = hessian(OUTPUT_STRING)
    print(numpy.array(HESS))
    with open('hess.n', 'w') as hessfile:
        for x in HESS:
            for y in x:
                hessfile.write(str(y)+'\n')
